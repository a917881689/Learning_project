<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
        <!-- 启动依赖注入的注解解析器 -->
        <context:annotation-config/>
        <context:component-scan base-package="com.yulu"/>
        
        <!-- Spring接管Action控制权 -->
      <bean id="customerAction" class="com.yulu.web.action.CustomerAction" scope="prototype"/>
      <bean id="linkmanAction" class="com.yulu.web.action.LinkmanAction" scope="prototype"/>
      <bean id="userAction" class="com.yulu.web.action.UserAction" scope="prototype"/>
      
      <bean id="customerService" class="com.yulu.service.impl.CustomerServiceImpl" />
      <bean id="linkmanService" class="com.yulu.service.impl.LinkmanServiceImpl" />
      <bean id="userService" class="com.yulu.service.impl.UserServiceImpl"/>
      
      <bean id="customerDao" class="com.yulu.dao.impl.CustomerDaoImpl" />
	  <bean id="linkmanDao" class="com.yulu.dao.impl.LinkmanDaoImpl" />
	  <bean id="userDao" class="com.yulu.dao.impl.UserDaoImpl" />
	  
	<!-- 配置数据源 -->  
    <context:property-placeholder location="classpath:jdbc.properties"/>
    	
   	<!-- C3P0连接池 -->
   	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="maxPoolSize" value="20" />
        <property name="minPoolSize" value="5" /> 
        <!-- 初始化建立的连接数 -->  
        <property name="initialPoolSize" value="10" />
        <!-- 最大空闲时间，120秒内未被使用的连接将被丢弃 -->  
		<property name="maxIdleTime" value="120" />  
		<!-- 当连接池耗尽，且未达到最大连接数时，一次获取的连接数 -->  
		<property name="acquireIncrement" value="2" />  
		<!-- 空闲检查时间间隔， 每隔120秒检查连接池里的空闲连接 ，单位是秒 -->  
		<property name="idleConnectionTestPeriod" value="60" />  
   	</bean>
   	
    <!-- 配置sessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">        
       		<props>
	            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	            <prop key="hibernate.format_sql">true</prop>
	            <prop key="hibernate.show_sql">true</prop>
	            <prop key="hibernate.hbm2ddl.auto">update</prop>
	            <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
	        </props>        
	    </property>
	<property name="annotatedClasses">
		<list> 
		   <value>com.yulu.entity.Customer</value>
		   <value>com.yulu.entity.Linkman</value>
		   <value>com.yulu.entity.User</value>
		</list> 
	</property>
	</bean>
	<!--   创建hibernateTemplate模板 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 创建Spring管理Hibernate的事务平台管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<!-- 通过Spring来管理sessionFactory 会创建session会话对象 -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 开启事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>








